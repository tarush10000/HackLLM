version: '3.8'

services:
  # Redis service
  redis:
    image: redis:7-alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app_network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL service
  postgres:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: document_chunks
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant service
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant_db
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - app_network
    restart: unless-stopped
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Database initialization service (runs once)
  db-init:
    build: .
    container_name: db_init
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/document_chunks
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - PYTHONPATH=/app
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    networks:
      - app_network
    command: >
      sh -c "
        echo 'ðŸ”§ Initializing database...' &&
        cd /app &&
        python app/create_tables.py &&
        echo 'âœ… Database initialization complete!'
      "
    restart: "no"  # Only run once

  # FastAPI app service
  app:
    build: .
    container_name: fastapi_app
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/document_chunks
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - REDIS_URL=redis://redis:6379
      - PYTHONPATH=/app
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    networks:
      - app_network
    restart: unless-stopped
    command: >
      sh -c "
        echo 'ðŸš€ Starting FastAPI application...' &&
        cd /app &&
        echo 'ðŸ”§ Initializing Qdrant collection...' &&
        python -c 'from app.vector_store import ensure_collection_correct; ensure_collection_correct()' &&
        echo 'ðŸŽ¯ Starting server...' &&
        uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
  qdrant_data:
  redis_data:

networks:
  app_network:
    driver: bridge